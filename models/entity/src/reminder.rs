//! SeaORM Entity. Generated by sea-orm-codegen 0.8.0

use sea_orm::entity::prelude::*;

use super::sea_orm_active_enums::Timezone;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "reminder")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub uid: String,
    pub name: String,
    pub channel_id: i64,
    pub utc_time: DateTimeUtc,
    pub timezone: Timezone,
    pub interval_seconds: Option<i32>,
    pub interval_months: Option<i32>,
    pub enabled: bool,
    pub expires: Option<DateTimeUtc>,
    pub username: Option<String>,
    pub avatar: Option<String>,
    pub content: Option<String>,
    pub tts: bool,
    pub attachment: Option<Vec<u8>>,
    pub attachment_name: Option<String>,
    pub embed_title: Option<String>,
    pub embed_description: Option<String>,
    pub embed_image_url: Option<String>,
    pub embed_thumbnail_url: Option<String>,
    pub embed_footer: Option<String>,
    pub embed_footer_url: Option<String>,
    pub embed_author: Option<String>,
    pub embed_author_url: Option<String>,
    pub embed_color: Option<i32>,
    pub embed_fields: Option<Json>,
    pub set_at: DateTimeUtc,
    pub set_by: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::channel::Entity",
        from = "Column::ChannelId",
        to = "super::channel::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Channel,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::SetBy",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    User,
}

impl Related<super::channel::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Channel.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
